{
  "version": 3,
  "sources": ["src/app/services/comprehensive-artist.service.ts", "src/app/components/socials-artist-cards/socials-artist-cards.component.ts", "src/app/components/socials-artist-cards/socials-artist-cards.component.html", "src/app/pages/social-links/social-links.ts", "src/app/pages/social-links/social-links.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ArtistCreditService, ArtistContribution, ProjectType } from './artist-credit.service';\n\n/**\n * Interface for artist display on socials page\n */\nexport interface SocialsArtist {\n  readonly id: string;\n  readonly name: string;\n  readonly displayName: string;\n  readonly role: string;\n  readonly description: string;\n  readonly avatar: string;\n  readonly color: string;\n  readonly socialLinks: ArtistSocialLinks;\n  readonly projects: ProjectType[];\n  readonly trackCount: number;\n  readonly isMainArtist: boolean;\n  readonly isFeatured: boolean;\n  readonly bio?: string;\n}\n\n/**\n * Interface for social media links\n */\nexport interface ArtistSocialLinks {\n  youtube?: string;\n  twitter?: string;\n  instagram?: string;\n  website?: string;\n  carrd?: string;\n  linktr?: string;\n  bandcamp?: string;\n  reelcrafter?: string;\n  twitch?: string;\n}\n\n/**\n * Filter options for artist display\n */\nexport interface ArtistFilter {\n  project?: ProjectType | 'all';\n  role?: string | 'all';\n  hasLinks?: boolean;\n  minTracks?: number;\n}\n\n/**\n * Comprehensive Artist Service for Socials Page\n *\n * Provides unified access to all Prismatic Collections artists\n * across both Phantasia projects with filtering and organization\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComprehensiveArtistService {\n  private readonly allArtistsSubject = new BehaviorSubject<SocialsArtist[]>([]);\n  private readonly filterSubject = new BehaviorSubject<ArtistFilter>({ project: 'all' });\n\n  // Public observables\n  public readonly allArtists$ = this.allArtistsSubject.asObservable();\n  public readonly currentFilter$ = this.filterSubject.asObservable();\n\n  // Filtered artists observable\n  public readonly filteredArtists$ = this.allArtists$.pipe(\n    map(artists => this.applyFilter(artists, this.filterSubject.value))\n  );\n\n  constructor(private readonly artistCreditService: ArtistCreditService) {\n    this.initializeArtists();\n  }\n\n  /**\n   * Initialize comprehensive artist data\n   */\n  private initializeArtists(): void {\n    const allArtistContributions = this.artistCreditService.getAllArtistsAllProjects();\n    const socialsArtists = this.convertToSocialsArtists(allArtistContributions);\n    this.allArtistsSubject.next(socialsArtists);\n  }\n\n  /**\n   * Convert artist contributions to socials artist format\n   */\n  private convertToSocialsArtists(contributions: ArtistContribution[]): SocialsArtist[] {\n    // Group contributions by artist name\n    const artistMap = new Map<string, ArtistContribution[]>();\n\n    contributions.forEach(contribution => {\n      const existing = artistMap.get(contribution.artistName) || [];\n      existing.push(contribution);\n      artistMap.set(contribution.artistName, existing);\n    });\n\n    // Convert to socials artists\n    const socialsArtists: SocialsArtist[] = [];\n\n    artistMap.forEach((artistContributions, artistName) => {\n      const primaryContribution = artistContributions[0];\n\n      // Determine projects this artist appears in\n      const projects = this.getArtistProjects(artistName);\n\n      // Count tracks\n      const trackCount = artistContributions.length;\n\n      // Determine primary role\n      const role = this.determinePrimaryRole(artistContributions);\n\n      // Create description based on contributions\n      const description = this.generateArtistDescription(artistContributions, projects);\n\n      const socialsArtist: SocialsArtist = {\n        id: this.generateArtistId(artistName),\n        name: artistName,\n        displayName: primaryContribution.artistDisplayName,\n        role,\n        description,\n        avatar: primaryContribution.avatar || this.getDefaultAvatar(artistName),\n        color: primaryContribution.color,\n        socialLinks: primaryContribution.socialLinks,\n        projects,\n        trackCount,\n        isMainArtist: this.isMainArtist(artistContributions),\n        isFeatured: this.isFeatured(artistContributions),\n        bio: this.getArtistBio(artistName)\n      };\n\n      socialsArtists.push(socialsArtist);\n    });\n\n    // Sort by importance: main artists first, then by track count, then alphabetically\n    return socialsArtists.sort((a, b) => {\n      if (a.isMainArtist && !b.isMainArtist) return -1;\n      if (!a.isMainArtist && b.isMainArtist) return 1;\n      if (a.trackCount !== b.trackCount) return b.trackCount - a.trackCount;\n      return a.displayName.localeCompare(b.displayName);\n    });\n  }\n\n  /**\n   * Get projects an artist appears in\n   */\n  private getArtistProjects(artistName: string): ProjectType[] {\n    const phantasia1Artists = this.artistCreditService.getProjectArtists('phantasia1');\n    const phantasia2Artists = this.artistCreditService.getProjectArtists('phantasia2');\n\n    const projects: ProjectType[] = [];\n\n    if (phantasia1Artists.some(a => a.artistName === artistName)) {\n      projects.push('phantasia1');\n    }\n\n    if (phantasia2Artists.some(a => a.artistName === artistName)) {\n      projects.push('phantasia2');\n    }\n\n    return projects;\n  }\n\n  /**\n   * Determine primary role for an artist\n   */\n  private determinePrimaryRole(contributions: ArtistContribution[]): string {\n    const roleCounts = new Map<string, number>();\n\n    contributions.forEach(contribution => {\n      const count = roleCounts.get(contribution.role) || 0;\n      roleCounts.set(contribution.role, count + 1);\n    });\n\n    // Find most common role\n    let primaryRole = 'Artist';\n    let maxCount = 0;\n\n    roleCounts.forEach((count, role) => {\n      if (count > maxCount) {\n        maxCount = count;\n        primaryRole = role;\n      }\n    });\n\n    return primaryRole;\n  }\n\n  /**\n   * Generate artist description based on contributions\n   */\n  private generateArtistDescription(contributions: ArtistContribution[], projects: ProjectType[]): string {\n    const roles = Array.from(new Set(contributions.map(c => c.role)));\n    const projectNames = projects.map(p => p === 'phantasia1' ? 'Phantasia 1' : 'Phantasia 2');\n\n    let description = `Contributing as ${roles.slice(0, 2).join(' and ')}`;\n    if (roles.length > 2) {\n      description += ` among other roles`;\n    }\n\n    description += ` across ${projectNames.join(' and ')}.`;\n\n    if (contributions.length > 1) {\n      description += ` Featured on ${contributions.length} tracks.`;\n    }\n\n    return description;\n  }\n\n  /**\n   * Check if artist is a main artist\n   */\n  private isMainArtist(contributions: ArtistContribution[]): boolean {\n    return contributions.some(c =>\n      c.role === 'Main Artist' ||\n      c.participationType === 'Primary'\n    );\n  }\n\n  /**\n   * Check if artist is featured\n   */\n  private isFeatured(contributions: ArtistContribution[]): boolean {\n    return contributions.some(c =>\n      c.role === 'Featured Artist' ||\n      c.participationType === 'Featured'\n    );\n  }\n\n  /**\n   * Get artist bio from the service\n   */\n  private getArtistBio(artistName: string): string | undefined {\n    const artistData = this.artistCreditService.getArtistData(artistName);\n    return artistData?.bio;\n  }\n\n  /**\n   * Generate default avatar if none exists\n   */\n  private getDefaultAvatar(artistName: string): string {\n    return `assets/images/artists/default-avatar.svg`;\n  }\n\n  /**\n   * Generate consistent artist ID\n   */\n  private generateArtistId(name: string): string {\n    return name.toLowerCase().replace(/[^a-z0-9]/g, '-');\n  }\n\n  /**\n   * Apply filter to artists list\n   */\n  private applyFilter(artists: SocialsArtist[], filter: ArtistFilter): SocialsArtist[] {\n    return artists.filter(artist => {\n      // Project filter\n      if (filter.project && filter.project !== 'all') {\n        if (!artist.projects.includes(filter.project)) {\n          return false;\n        }\n      }\n\n      // Role filter\n      if (filter.role && filter.role !== 'all') {\n        if (artist.role !== filter.role) {\n          return false;\n        }\n      }\n\n      // Has links filter\n      if (filter.hasLinks) {\n        const hasLinks = Object.values(artist.socialLinks).some(link => link && link.length > 0);\n        if (!hasLinks) {\n          return false;\n        }\n      }\n\n      // Minimum tracks filter\n      if (filter.minTracks && artist.trackCount < filter.minTracks) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  // ====== PUBLIC METHODS ======\n\n  /**\n   * Get all artists\n   */\n  getAllArtists(): Observable<SocialsArtist[]> {\n    return this.allArtists$;\n  }\n\n  /**\n   * Get filtered artists\n   */\n  getFilteredArtists(): Observable<SocialsArtist[]> {\n    return this.filteredArtists$;\n  }\n\n  /**\n   * Set filter for artists\n   */\n  setFilter(filter: ArtistFilter): void {\n    this.filterSubject.next(filter);\n  }\n\n  /**\n   * Get main artists (those with primary contributions)\n   */\n  getMainArtists(): Observable<SocialsArtist[]> {\n    return this.allArtists$.pipe(\n      map(artists => artists.filter(artist => artist.isMainArtist))\n    );\n  }\n\n  /**\n   * Get featured artists\n   */\n  getFeaturedArtists(): Observable<SocialsArtist[]> {\n    return this.allArtists$.pipe(\n      map(artists => artists.filter(artist => artist.isFeatured))\n    );\n  }\n\n  /**\n   * Get artists by project\n   */\n  getArtistsByProject(project: ProjectType): Observable<SocialsArtist[]> {\n    return this.allArtists$.pipe(\n      map(artists => artists.filter(artist => artist.projects.includes(project)))\n    );\n  }\n\n  /**\n   * Get cross-project artists\n   */\n  getCrossProjectArtists(): Observable<SocialsArtist[]> {\n    return this.allArtists$.pipe(\n      map(artists => artists.filter(artist => artist.projects.length > 1))\n    );\n  }\n\n  /**\n   * Get artists with social links\n   */\n  getArtistsWithSocialLinks(): Observable<SocialsArtist[]> {\n    return this.allArtists$.pipe(\n      map(artists => artists.filter(artist =>\n        Object.values(artist.socialLinks).some(link => link && link.length > 0)\n      ))\n    );\n  }\n\n  /**\n   * Search artists by name\n   */\n  searchArtists(query: string): Observable<SocialsArtist[]> {\n    return this.allArtists$.pipe(\n      map(artists => artists.filter(artist =>\n        artist.name.toLowerCase().includes(query.toLowerCase()) ||\n        artist.displayName.toLowerCase().includes(query.toLowerCase())\n      ))\n    );\n  }\n\n  /**\n   * Get available roles for filtering\n   */\n  getAvailableRoles(): Observable<string[]> {\n    return this.allArtists$.pipe(\n      map(artists => {\n        const roles = new Set(artists.map(artist => artist.role));\n        return Array.from(roles).sort();\n      })\n    );\n  }\n\n  /**\n   * Get project statistics\n   */\n  getProjectStatistics(): Observable<{\n    phantasia1: { artists: number; mainArtists: number; featured: number };\n    phantasia2: { artists: number; mainArtists: number; featured: number };\n    crossProject: number;\n    totalUnique: number;\n  }> {\n    return this.allArtists$.pipe(\n      map(artists => {\n        const phantasia1Artists = artists.filter(a => a.projects.includes('phantasia1'));\n        const phantasia2Artists = artists.filter(a => a.projects.includes('phantasia2'));\n        const crossProjectArtists = artists.filter(a => a.projects.length > 1);\n\n        return {\n          phantasia1: {\n            artists: phantasia1Artists.length,\n            mainArtists: phantasia1Artists.filter(a => a.isMainArtist).length,\n            featured: phantasia1Artists.filter(a => a.isFeatured).length\n          },\n          phantasia2: {\n            artists: phantasia2Artists.length,\n            mainArtists: phantasia2Artists.filter(a => a.isMainArtist).length,\n            featured: phantasia2Artists.filter(a => a.isFeatured).length\n          },\n          crossProject: crossProjectArtists.length,\n          totalUnique: artists.length\n        };\n      })\n    );\n  }\n}", "import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, ChangeDetectorRef, Input, computed, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { trigger, state, style, transition, animate, query, stagger } from '@angular/animations';\nimport { ComprehensiveArtistService, SocialsArtist, ArtistFilter } from '../../services/comprehensive-artist.service';\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\nimport { takeUntil, distinctUntilChanged, debounceTime, map, shareReplay } from 'rxjs/operators';\n\n/**\n * Display modes for artist cards\n */\nexport type ArtistDisplayMode = 'all' | 'main' | 'featured' | 'cross-project' | 'phantasia1' | 'phantasia2';\n\n/**\n * Animation states for artist cards\n */\nexport type CardAnimationState = 'enter' | 'leave' | 'visible' | 'hidden';\n\n/**\n * Interface for card display data with animation state\n */\ninterface ArtistCardData extends SocialsArtist {\n  animationState: CardAnimationState;\n  index: number;\n}\n\n/**\n * Socials Artist Cards Component\n *\n * Professional artist cards component designed specifically for the socials page.\n * Features all artists from both Phantasia projects with comprehensive filtering,\n * beautiful animations, and complete social media integration.\n */\n@Component({\n  selector: 'app-socials-artist-cards',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './socials-artist-cards.component.html',\n  styleUrls: ['./socials-artist-cards.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    // Main container animation for staggered entry\n    trigger('cardsContainer', [\n      transition('* => *', [\n        query('.artist-card', [\n          style({ opacity: 0, transform: 'translateY(30px) scale(0.95)' }),\n          stagger(80, [\n            animate('600ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n              style({ opacity: 1, transform: 'translateY(0) scale(1)' })\n            )\n          ])\n        ], { optional: true })\n      ])\n    ]),\n\n    // Individual card animations\n    trigger('cardAnimation', [\n      state('enter', style({\n        opacity: 1,\n        transform: 'translateY(0) scale(1)',\n        filter: 'blur(0px)'\n      })),\n\n      state('visible', style({\n        opacity: 1,\n        transform: 'translateY(0) scale(1)',\n        filter: 'blur(0px)'\n      })),\n\n      state('leave', style({\n        opacity: 0,\n        transform: 'translateY(-20px) scale(0.95)',\n        filter: 'blur(2px)'\n      })),\n\n      state('hidden', style({\n        opacity: 0.3,\n        transform: 'translateY(0) scale(0.98)',\n        filter: 'blur(1px)'\n      })),\n\n      transition('* => enter', [\n        style({ opacity: 0, transform: 'translateY(40px) scale(0.8)', filter: 'blur(4px)' }),\n        animate('700ms cubic-bezier(0.175, 0.885, 0.32, 1.275)')\n      ]),\n\n      transition('* => visible', [\n        animate('400ms cubic-bezier(0.4, 0.0, 0.2, 1)')\n      ]),\n\n      transition('* => leave', [\n        animate('300ms cubic-bezier(0.4, 0.0, 1, 1)')\n      ]),\n\n      transition('* => hidden', [\n        animate('250ms cubic-bezier(0.4, 0.0, 0.6, 1)')\n      ])\n    ]),\n\n    // Project badge animation\n    trigger('projectBadge', [\n      state('show', style({\n        opacity: 1,\n        transform: 'translateY(0) scale(1)'\n      })),\n\n      state('hide', style({\n        opacity: 0,\n        transform: 'translateY(-10px) scale(0.8)'\n      })),\n\n      transition('hide => show', [\n        animate('300ms cubic-bezier(0.4, 0.0, 0.2, 1)')\n      ]),\n\n      transition('show => hide', [\n        animate('200ms cubic-bezier(0.4, 0.0, 1, 1)')\n      ])\n    ]),\n\n    // Social links animation\n    trigger('socialLinksAnimation', [\n      state('show', style({\n        opacity: 1,\n        transform: 'translateY(0)'\n      })),\n\n      state('hide', style({\n        opacity: 0,\n        transform: 'translateY(10px)'\n      })),\n\n      transition('hide => show', [\n        query('.social-link', [\n          style({ opacity: 0, transform: 'translateY(10px) scale(0.8)' }),\n          stagger(40, [\n            animate('300ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n              style({ opacity: 1, transform: 'translateY(0) scale(1)' })\n            )\n          ])\n        ], { optional: true })\n      ]),\n\n      transition('show => hide', [\n        animate('200ms cubic-bezier(0.4, 0.0, 1, 1)')\n      ])\n    ])\n  ]\n})\nexport class SocialsArtistCardsComponent implements OnInit, OnDestroy {\n  private readonly destroy$ = new Subject<void>();\n  private readonly cardUpdateSubject = new BehaviorSubject<ArtistCardData[]>([]);\n\n  // Input properties\n  @Input() displayMode: ArtistDisplayMode = 'all';\n  @Input() maxVisibleCards = 24;\n  @Input() enableAnimations = true;\n  @Input() showFilters = true;\n  @Input() compactMode = false;\n\n  // Reactive component state using signals\n  private readonly artistsSignal = signal<SocialsArtist[]>([]);\n  private readonly currentFilterSignal = signal<ArtistFilter>({ project: 'all' });\n  private readonly cardsAnimationTriggerSignal = signal<number>(0);\n\n  // Computed properties for optimal template binding\n  artists = computed(() => this.artistsSignal());\n  currentFilter = computed(() => this.currentFilterSignal());\n  cardsAnimationTrigger = computed(() => this.cardsAnimationTriggerSignal());\n\n  // Optimized observables with shareReplay for multiple template subscriptions\n  readonly optimizedArtistCards$: Observable<ArtistCardData[]> = this.cardUpdateSubject.pipe(\n    distinctUntilChanged((prev, curr) => this.compareCardArrays(prev, curr)),\n    debounceTime(16), // 60fps animation timing\n    map(cards => {\n      console.log('[SocialsArtistCardsComponent] optimizedArtistCards$ emitting:', cards.length, 'cards');\n      return cards;\n    }),\n    shareReplay(1),\n    takeUntil(this.destroy$)\n  );\n\n  // Available filters\n  readonly availableRoles$: Observable<string[]> = this.comprehensiveArtistService.getAvailableRoles();\n  readonly projectStatistics$ = this.comprehensiveArtistService.getProjectStatistics();\n\n  constructor(\n    private readonly comprehensiveArtistService: ComprehensiveArtistService,\n    private readonly cdr: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.setupArtistTracking();\n    console.log('[SocialsArtistCardsComponent] Component initialized');\n  }\n\n  /**\n   * Setup optimized artist tracking with reactive patterns\n   */\n  private setupArtistTracking(): void {\n    // Get artists based on display mode\n    this.getArtistsForDisplayMode()\n      .pipe(\n        takeUntil(this.destroy$),\n        distinctUntilChanged((prev, curr) => this.compareArtistArrays(prev, curr)),\n        debounceTime(50) // Debounce for smooth updates\n      )\n      .subscribe((artists) => {\n        this.artistsSignal.set(artists);\n        this.updateOptimizedArtistCards(artists);\n        this.cdr.markForCheck();\n\n        console.log(`[SocialsArtistCardsComponent] Artists updated: ${artists.length} artists in ${this.displayMode} mode`);\n      });\n  }\n\n  /**\n   * Get artists observable based on display mode\n   */\n  private getArtistsForDisplayMode(): Observable<SocialsArtist[]> {\n    switch (this.displayMode) {\n      case 'main':\n        return this.comprehensiveArtistService.getMainArtists();\n      case 'featured':\n        return this.comprehensiveArtistService.getFeaturedArtists();\n      case 'cross-project':\n        return this.comprehensiveArtistService.getCrossProjectArtists();\n      case 'phantasia1':\n        return this.comprehensiveArtistService.getArtistsByProject('phantasia1');\n      case 'phantasia2':\n        return this.comprehensiveArtistService.getArtistsByProject('phantasia2');\n      case 'all':\n      default:\n        return this.comprehensiveArtistService.getAllArtists();\n    }\n  }\n\n  /**\n   * Update optimized artist cards with memory-efficient processing\n   */\n  private updateOptimizedArtistCards(artists: SocialsArtist[]): void {\n    console.log('[SocialsArtistCardsComponent] updateOptimizedArtistCards called with artists:', artists.length);\n\n    // Skip update if no artists\n    if (artists.length === 0) {\n      console.log('[SocialsArtistCardsComponent] No artists, clearing cards');\n      this.clearOptimizedArtistCards();\n      return;\n    }\n\n    // Limit to max visible cards\n    const limitedArtists = artists.slice(0, this.maxVisibleCards);\n    const newCards = this.createOptimizedCardData(limitedArtists);\n    console.log('[SocialsArtistCardsComponent] Created cards:', newCards.length, 'from artists:', limitedArtists.length);\n\n    this.cardUpdateSubject.next(newCards);\n    this.cardsAnimationTriggerSignal.update(val => val + 1);\n\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * Create optimized card data with minimal object creation\n   */\n  private createOptimizedCardData(artists: SocialsArtist[]): ArtistCardData[] {\n    return artists.map((artist, index) => ({\n      ...artist,\n      animationState: 'enter' as CardAnimationState,\n      index\n    }));\n  }\n\n  /**\n   * Get social media icon for platform\n   */\n  getSocialIcon(platform: string): string {\n    const iconMap: Record<string, string> = {\n      youtube: 'smart_display',\n      twitter: 'alternate_email',\n      instagram: 'photo_camera',\n      website: 'language',\n      carrd: 'badge',\n      linktr: 'link',\n      bandcamp: 'library_music',\n      reelcrafter: 'play_circle',\n      twitch: 'videocam'\n    };\n\n    return iconMap[platform] || 'link';\n  }\n\n  /**\n   * Get social media platform display name\n   */\n  getSocialPlatformName(platform: string): string {\n    const nameMap: Record<string, string> = {\n      youtube: 'YouTube',\n      twitter: 'Twitter/X',\n      instagram: 'Instagram',\n      website: 'Website',\n      carrd: 'Carrd',\n      linktr: 'Linktree',\n      bandcamp: 'Bandcamp',\n      reelcrafter: 'ReelCrafter',\n      twitch: 'Twitch'\n    };\n\n    return nameMap[platform] || platform.charAt(0).toUpperCase() + platform.slice(1);\n  }\n\n  /**\n   * Get CSS custom properties for artist card\n   */\n  getCardStyle(card: ArtistCardData): any {\n    return {\n      '--artist-color': card.color || '#6c757d',\n      '--card-index': card.index.toString()\n    };\n  }\n\n  /**\n   * Handle social link click\n   */\n  onSocialLinkClick(url: string, platform: string, artistName: string): void {\n    console.log('[SocialsArtistCardsComponent] Opening social link:', { url, platform, artistName });\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n\n  /**\n   * Generate artist initials for avatar fallback\n   */\n  getArtistInitials(name: string): string {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  }\n\n  /**\n   * Check if artist has social links\n   */\n  hasSocialLinks(artist: SocialsArtist): boolean {\n    return Object.values(artist.socialLinks).some(link => link && link.length > 0);\n  }\n\n  /**\n   * Get visible social links for an artist\n   */\n  getVisibleSocialLinks(artist: SocialsArtist): Array<{ platform: string; url: string }> {\n    return Object.entries(artist.socialLinks)\n      .filter(([, url]) => url && url.length > 0)\n      .map(([platform, url]) => ({ platform, url }));\n  }\n\n  /**\n   * Get project badges for artist\n   */\n  getProjectBadges(artist: SocialsArtist): Array<{ id: string; name: string; color: string }> {\n    return artist.projects.map(project => ({\n      id: project,\n      name: project === 'phantasia1' ? 'P1' : 'P2',\n      color: project === 'phantasia1' ? '#FF6B6B' : '#6C5CE7'\n    }));\n  }\n\n  /**\n   * Get role display text\n   */\n  getRoleDisplay(artist: SocialsArtist): string {\n    if (artist.isMainArtist && artist.isFeatured) {\n      return 'Main & Featured Artist';\n    } else if (artist.isMainArtist) {\n      return 'Main Artist';\n    } else if (artist.isFeatured) {\n      return 'Featured Artist';\n    }\n    return artist.role;\n  }\n\n  /**\n   * Handle filter change\n   */\n  onFilterChange(filter: ArtistFilter): void {\n    this.currentFilterSignal.set(filter);\n    this.comprehensiveArtistService.setFilter(filter);\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * Handle display mode change\n   */\n  onDisplayModeChange(mode: ArtistDisplayMode): void {\n    if (mode !== this.displayMode) {\n      this.displayMode = mode;\n      this.setupArtistTracking(); // Re-setup with new mode\n      this.cdr.markForCheck();\n    }\n  }\n\n  /**\n   * Handle avatar image loading errors\n   */\n  onAvatarError(event: any, artistName: string): void {\n    console.warn(`Avatar image failed to load for ${artistName}, using initials fallback`);\n    const target = event.target as HTMLImageElement;\n    target.style.display = 'none';\n\n    // Show initials fallback\n    const parent = target.parentElement;\n    if (parent) {\n      parent.classList.add('avatar-fallback');\n    }\n  }\n\n  /**\n   * Optimized track by function for Angular *ngFor\n   */\n  trackByArtistId(index: number, card: ArtistCardData): string {\n    return `${card.id}-${card.animationState}`;\n  }\n\n  /**\n   * Clear optimized artist cards\n   */\n  private clearOptimizedArtistCards(): void {\n    this.cardUpdateSubject.next([]);\n    this.cdr.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    // Complete observables\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.cardUpdateSubject.complete();\n\n    console.log('[SocialsArtistCardsComponent] Component destroyed');\n  }\n\n  /**\n   * Optimized array comparison for better performance\n   */\n  private compareArtistArrays(prev: SocialsArtist[], curr: SocialsArtist[]): boolean {\n    if (prev.length !== curr.length) return false;\n\n    // Fast ID-based comparison\n    for (let i = 0; i < prev.length; i++) {\n      if (prev[i].id !== curr[i].id) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Optimized card array comparison\n   */\n  private compareCardArrays(prev: ArtistCardData[], curr: ArtistCardData[]): boolean {\n    if (prev.length !== curr.length) return false;\n\n    for (let i = 0; i < prev.length; i++) {\n      if (prev[i].id !== curr[i].id || prev[i].animationState !== curr[i].animationState) {\n        return false;\n      }\n    }\n    return true;\n  }\n}", "<!-- Socials Artist Cards Container -->\n<div class=\"socials-artist-cards\"\n     [@cardsContainer]=\"cardsAnimationTrigger()\"\n     [class.compact-mode]=\"compactMode\"\n     [class.with-filters]=\"showFilters\">\n\n  <!-- Section Header -->\n  <div class=\"section-header\">\n    <div class=\"header-content\">\n      <h2 class=\"section-title\">\n        <mat-icon class=\"title-icon\">people</mat-icon>\n        <span>Featured Artists</span>\n      </h2>\n      <p class=\"section-subtitle\">\n        Discover the talented creators behind Prismatic Collections\n      </p>\n    </div>\n\n    <!-- Display Mode Selector -->\n    <div class=\"display-modes\" *ngIf=\"showFilters\">\n      <button class=\"mode-button\"\n              [class.active]=\"displayMode === 'all'\"\n              (click)=\"onDisplayModeChange('all')\"\n              title=\"Show all artists with social links\">\n        <mat-icon>group</mat-icon>\n        <span>All Artists</span>\n      </button>\n\n      <button class=\"mode-button\"\n              [class.active]=\"displayMode === 'main'\"\n              (click)=\"onDisplayModeChange('main')\"\n              title=\"Show main artists\">\n        <mat-icon>star</mat-icon>\n        <span>Main</span>\n      </button>\n\n      <button class=\"mode-button\"\n              [class.active]=\"displayMode === 'featured'\"\n              (click)=\"onDisplayModeChange('featured')\"\n              title=\"Show featured artists\">\n        <mat-icon>featured_play_list</mat-icon>\n        <span>Featured</span>\n      </button>\n\n      <button class=\"mode-button\"\n              [class.active]=\"displayMode === 'cross-project'\"\n              (click)=\"onDisplayModeChange('cross-project')\"\n              title=\"Show artists who appear in both projects\">\n        <mat-icon>compare_arrows</mat-icon>\n        <span>Both Projects</span>\n      </button>\n\n      <button class=\"mode-button\"\n              [class.active]=\"displayMode === 'phantasia1'\"\n              (click)=\"onDisplayModeChange('phantasia1')\"\n              title=\"Show Phantasia 1 artists\">\n        <mat-icon>album</mat-icon>\n        <span>P1</span>\n      </button>\n\n      <button class=\"mode-button\"\n              [class.active]=\"displayMode === 'phantasia2'\"\n              (click)=\"onDisplayModeChange('phantasia2')\"\n              title=\"Show Phantasia 2 artists\">\n        <mat-icon>library_music</mat-icon>\n        <span>P2</span>\n      </button>\n    </div>\n  </div>\n\n  <!-- Statistics Bar -->\n  <div class=\"statistics-bar\" *ngIf=\"projectStatistics$ | async as stats\">\n    <div class=\"stat-item\">\n      <span class=\"stat-number\">{{ stats.totalUnique }}</span>\n      <span class=\"stat-label\">Total Artists</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-number\">{{ stats.phantasia1.artists }}</span>\n      <span class=\"stat-label\">Phantasia 1</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-number\">{{ stats.phantasia2.artists }}</span>\n      <span class=\"stat-label\">Phantasia 2</span>\n    </div>\n    <div class=\"stat-item\">\n      <span class=\"stat-number\">{{ stats.crossProject }}</span>\n      <span class=\"stat-label\">Cross-Project</span>\n    </div>\n  </div>\n\n  <!-- Artist Cards Grid -->\n  <div class=\"artist-cards-grid\"\n       *ngIf=\"(optimizedArtistCards$ | async) as cards\">\n\n    <div class=\"artist-card\"\n         *ngFor=\"let card of cards; trackBy: trackByArtistId\"\n         [@cardAnimation]=\"card.animationState\"\n         [ngStyle]=\"getCardStyle(card)\"\n         [class.main-artist]=\"card.isMainArtist\"\n         [class.featured-artist]=\"card.isFeatured\">\n\n      <!-- Artist Avatar -->\n      <div class=\"artist-avatar\">\n        <div class=\"avatar-container\">\n          <img [src]=\"card.avatar\"\n               [alt]=\"card.displayName + ' avatar'\"\n               class=\"avatar-image\"\n               (error)=\"onAvatarError($event, card.name)\"\n               loading=\"lazy\">\n          <div class=\"avatar-initials\">{{ getArtistInitials(card.name) }}</div>\n        </div>\n\n        <!-- Project Badges -->\n        <div class=\"project-badges\" [@projectBadge]=\"'show'\">\n          <div class=\"project-badge\"\n               *ngFor=\"let badge of getProjectBadges(card)\"\n               [style.background-color]=\"badge.color\"\n               [title]=\"'Phantasia Project ' + (badge.id === 'phantasia1' ? '1' : '2')\">\n            {{ badge.name }}\n          </div>\n        </div>\n\n        <div class=\"avatar-glow\" [style.background]=\"'radial-gradient(circle, ' + card.color + '40 0%, transparent 70%)'\"></div>\n      </div>\n\n      <!-- Artist Information -->\n      <div class=\"artist-info\">\n        <h3 class=\"artist-name\">{{ card.displayName }}</h3>\n        <p class=\"artist-role\">{{ getRoleDisplay(card) }}</p>\n        <p class=\"artist-description\">{{ card.description }}</p>\n\n        <!-- Track Count & Bio -->\n        <div class=\"artist-meta\">\n          <div class=\"track-count\" *ngIf=\"card.trackCount > 0\">\n            <mat-icon class=\"meta-icon\">music_note</mat-icon>\n            <span>{{ card.trackCount }} track{{ card.trackCount === 1 ? '' : 's' }}</span>\n          </div>\n          <div class=\"projects-info\" *ngIf=\"card.projects.length > 1\">\n            <mat-icon class=\"meta-icon\">compare_arrows</mat-icon>\n            <span>Cross-project artist</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Social Links -->\n      <div class=\"social-links\"\n           *ngIf=\"hasSocialLinks(card)\"\n           [@socialLinksAnimation]=\"'show'\">\n\n        <h4 class=\"links-title\">Connect</h4>\n        <div class=\"social-links-grid\">\n          <a class=\"social-link\"\n             *ngFor=\"let link of getVisibleSocialLinks(card)\"\n             [href]=\"link.url\"\n             [title]=\"getSocialPlatformName(link.platform) + ' - ' + card.displayName\"\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n             (click)=\"onSocialLinkClick(link.url, link.platform, card.name)\">\n\n            <mat-icon class=\"social-icon\">{{ getSocialIcon(link.platform) }}</mat-icon>\n            <span class=\"social-platform-name\">{{ getSocialPlatformName(link.platform) }}</span>\n            <mat-icon class=\"social-arrow\">arrow_forward</mat-icon>\n          </a>\n        </div>\n      </div>\n\n      <!-- Card Glow Effect -->\n      <div class=\"card-glow\"\n           [style.background]=\"'radial-gradient(circle at center, ' + card.color + '15 0%, transparent 70%)'\"></div>\n    </div>\n  </div>\n\n  <!-- Empty State -->\n  <div class=\"empty-state\"\n       *ngIf=\"(optimizedArtistCards$ | async)?.length === 0\">\n    <div class=\"empty-content\">\n      <mat-icon class=\"empty-icon\">people_outline</mat-icon>\n      <h3 class=\"empty-title\">No Artists Found</h3>\n      <p class=\"empty-message\">\n        Try changing the display mode or filters to see more artists.\n      </p>\n      <button class=\"reset-button\"\n              (click)=\"onDisplayModeChange('all')\"\n              *ngIf=\"displayMode !== 'all'\">\n        <mat-icon>refresh</mat-icon>\n        Show All Artists\n      </button>\n    </div>\n  </div>\n\n  <!-- Loading State -->\n  <div class=\"loading-state\"\n       *ngIf=\"!(optimizedArtistCards$ | async)\">\n    <div class=\"loading-content\">\n      <div class=\"loading-spinner\">\n        <mat-icon class=\"spinning\">refresh</mat-icon>\n      </div>\n      <h3 class=\"loading-title\">Discovering Artists...</h3>\n      <p class=\"loading-message\">\n        Loading the talented creators behind Prismatic Collections\n      </p>\n    </div>\n  </div>\n\n  <!-- Footer Info -->\n  <div class=\"cards-footer\"\n       *ngIf=\"(optimizedArtistCards$ | async) as cards\">\n    <div *ngIf=\"cards && cards.length > 0\" class=\"footer-content\">\n      <mat-icon class=\"footer-icon\">info</mat-icon>\n      <p class=\"footer-text\">\n        Showing <strong>{{ cards.length }}</strong> artist{{ cards.length === 1 ? '' : 's' }}\n        from the Prismatic Collections projects.\n        <span *ngIf=\"cards.length === maxVisibleCards\">\n          Some artists may be hidden. Use filters to explore more.\n        </span>\n      </p>\n    </div>\n  </div>\n</div>", "import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { SiteHeaderComponent } from '../../shared/components/site-header/site-header.component';\nimport { SquaresAnimationComponent } from '../../shared/components/squares-animation/squares-animation.component';\nimport { SocialsArtistCardsComponent } from '../../components/socials-artist-cards/socials-artist-cards.component';\n\n/**\n * Social Links component for artist social media connections\n * Displays various artists and their social media platforms\n */\n@Component({\n  selector: 'app-social-links',\n  standalone: true,\n  imports: [CommonModule, MatIconModule, SiteHeaderComponent, SquaresAnimationComponent, SocialsArtistCardsComponent],\n  templateUrl: './social-links.html',\n  styleUrls: ['./social-links.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SocialLinksComponent implements OnInit, OnDestroy {\n\n  ngOnInit(): void {\n    console.log('Social Links component initialized');\n    // Add body class for global scrolling support\n    document.body.classList.add('social-links-page-active');\n  }\n  \n  ngOnDestroy(): void {\n    // Clean up body class when component is destroyed\n    document.body.classList.remove('social-links-page-active');\n  }\n\n}\n", "<!-- Site Header -->\n<app-site-header></app-site-header>\n\n<!-- Social Links Page -->\n<div class=\"social-links-page anim-a\">\n  \n  <!-- TypeScript-based Square Animation (48 squares with space-like movement) -->\n  <app-squares-animation [count]=\"48\" [enabled]=\"true\"></app-squares-animation>\n\n  <!-- Main Content -->\n  <main class=\"social-main\">\n    \n    <!-- Hero Section -->\n    <section class=\"hero\">\n      <div class=\"hero-content\">\n        <h1 class=\"title\">ARTIST CIRCLES</h1>\n        <p class=\"subtitle\">Connect with the creators behind Prismatic Collections</p>\n        <p class=\"description\">\n          Explore our artists' social media platforms, follow their journeys,\n          and stay updated with their latest musical creations and collaborations.\n        </p>\n      </div>\n      <div class=\"hero-background\">\n        <div class=\"overlay\"></div>\n      </div>\n    </section>\n\n    <!-- Artists Section with New Component -->\n    <section class=\"artists\">\n      <app-socials-artist-cards\n        [displayMode]=\"'all'\"\n        [maxVisibleCards]=\"24\"\n        [enableAnimations]=\"true\"\n        [showFilters]=\"true\"\n        [compactMode]=\"false\">\n      </app-socials-artist-cards>\n    </section>\n\n    <!-- Community Section -->\n    <section class=\"community\">\n      <div class=\"community-content\">\n        <h2 class=\"section-title\">Join Our Community</h2>\n        <p class=\"community-text\">\n          Be part of the Prismatic Collections community! Follow our artists,\n          share your thoughts, and discover new music together across both Phantasia projects.\n        </p>\n        <div class=\"community-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-number\">60+</span>\n            <span class=\"stat-label\">Contributing Artists</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">34</span>\n            <span class=\"stat-label\">Released Tracks</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">2</span>\n            <span class=\"stat-label\">Phantasia Projects</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-number\">∞</span>\n            <span class=\"stat-label\">Musical Possibilities</span>\n          </div>\n        </div>\n      </div>\n    </section>\n    \n  </main>\n  \n</div>\n"],
  "mappings": "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",
  "names": ["query"]
}
