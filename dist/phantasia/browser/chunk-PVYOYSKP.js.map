{
  "version": 3,
  "sources": ["src/app/core/services/geldb-integration.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, map, catchError, of } from 'rxjs';\n\n/**\n * Interface matching the geldb Artist schema\n */\nexport interface GelDbArtist {\n  id: string;\n  name: string;\n  display_name?: string;\n  bio?: string;\n  country?: string;\n  genre?: string;\n  website?: string;\n  avatar?: string;\n  color?: string;\n  social_links?: GelDbSocialLinks;\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * Interface matching the geldb SocialLinks schema\n */\nexport interface GelDbSocialLinks {\n  id: string;\n  youtube?: string;\n  twitter?: string;\n  instagram?: string;\n  website?: string;\n  carrd?: string;\n  linktr?: string;\n  bandcamp?: string;\n  reelcrafter?: string;\n  twitch?: string;\n}\n\n/**\n * Interface for Phantasia 2 track with geldb artist integration\n */\nexport interface GelDbTrack {\n  id: string;\n  title: string;\n  main_artist: GelDbArtist;\n  album?: GelDbAlbum;\n  track_number?: number;\n  start_time_seconds?: number;\n  end_time_seconds?: number;\n  duration_seconds?: number;\n  genre?: string;\n  lyrics?: string;\n  audio_file_path?: string;\n  audio_file_url?: string;\n  featured_artists: GelDbArtist[];\n  collaborators: GelDbArtist[];\n  additional_artists: GelDbArtist[];\n}\n\n/**\n * Interface matching the geldb Album schema\n */\nexport interface GelDbAlbum {\n  id: string;\n  title: string;\n  artist: GelDbArtist;\n  release_date?: string;\n  genre?: string;\n  description?: string;\n  cover_art_url?: string;\n  track_count?: number;\n  duration_seconds?: number;\n  songs: GelDbTrack[];\n}\n\n/**\n * Interface matching the geldb Collection schema\n */\nexport interface GelDbCollection {\n  id: string;\n  name: string;\n  description?: string;\n  cover_image_url?: string;\n  is_public: boolean;\n  songs: GelDbTrack[];\n  albums: GelDbAlbum[];\n}\n\n/**\n * Interface matching the geldb Prism schema\n */\nexport interface GelDbPrism {\n  id: string;\n  name: string;\n  description?: string;\n  color_scheme?: string;\n  theme?: string;\n  is_featured: boolean;\n  collections: GelDbCollection[];\n  featured_artists: GelDbArtist[];\n}\n\n/**\n * Interface for storing Twitter user data in GelDB\n */\nexport interface GelDbTwitterUser {\n  id: string;\n  twitter_id: string;\n  username: string;\n  display_name: string;\n  profile_image_url?: string;\n  verified?: boolean;\n  followers_count?: number;\n  following_count?: number;\n  tweet_count?: number;\n  cached_at: string;\n  updated_at: string;\n}\n\n/**\n * Interface for storing Twitter tweets in GelDB\n */\nexport interface GelDbTwitterTweet {\n  id: string;\n  tweet_id: string;\n  user_id: string;\n  text: string;\n  created_at: string;\n  retweet_count?: number;\n  like_count?: number;\n  reply_count?: number;\n  quote_count?: number;\n  hashtags: string[];\n  mentions: string[];\n  urls: string[];\n  cached_at: string;\n  updated_at: string;\n}\n\n/**\n * Interface for Twitter API usage tracking\n */\nexport interface GelDbTwitterApiUsage {\n  id: string;\n  endpoint: string;\n  method: string;\n  timestamp: string;\n  success: boolean;\n  rate_limit_remaining?: number;\n  error_message?: string;\n  monthly_calls_used: number;\n}\n\n/**\n * Artist avatar data structure with organized paths\n */\nexport interface ArtistAvatarMap {\n  [artistName: string]: {\n    avatarPath: string;\n    displayName: string;\n    color?: string;\n    genre?: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GelDbIntegrationService {\n  private readonly phantasia2Artists$ = new BehaviorSubject<GelDbArtist[]>([]);\n  private readonly phantasia2Album$ = new BehaviorSubject<GelDbAlbum | null>(null);\n  private readonly prismaticCollection$ = new BehaviorSubject<GelDbPrism | null>(null);\n\n  // Twitter data streams\n  private readonly twitterUsers$ = new BehaviorSubject<GelDbTwitterUser[]>([]);\n  private readonly twitterTweets$ = new BehaviorSubject<GelDbTwitterTweet[]>([]);\n  private readonly twitterApiUsage$ = new BehaviorSubject<GelDbTwitterApiUsage[]>([]);\n\n  /**\n   * Pre-organized artist avatar mapping based on file system analysis\n   */\n  private readonly artistAvatarMap: ArtistAvatarMap = {\n    'SpiralFlip': {\n      avatarPath: '/assets/images/artists/SpiralFlip.png',\n      displayName: 'SpiralFlip',\n      color: '#FF6B6B',\n      genre: 'Organiser'\n    },\n    'eili': {\n      avatarPath: '/assets/images/artists/Eili.png',\n      displayName: 'eili',\n      color: '#ffffff', // Changed from cyan to white for better readability\n      genre: 'Vocal, Electronic'\n    },\n    'Ariatec': {\n      avatarPath: '/assets/images/artists/Ariatec.png',\n      displayName: 'Ariatec',\n      color: '#45B7D1',\n      genre: 'Ambient, Cinematic'\n    },\n    'MB': {\n      avatarPath: '/assets/images/artists/MBgov.png',\n      displayName: 'MBgov',\n      color: '#96CEB4',\n      genre: 'Orchestral, Classical'\n    },\n    'Iku Hoshifuri': {\n      avatarPath: '/assets/images/artists/Iku Hoshifuri.png',\n      displayName: 'Iku Hoshifuri',\n      color: '#FFEAA7',\n      genre: 'Vocal, J-Pop'\n    },\n    'Justin Thornburgh': {\n      avatarPath: '/assets/images/artists/Justin Thornburgh.png',\n      displayName: 'Justin Thornburgh',\n      color: '#DDA0DD',\n      genre: 'Folk, Accordion'\n    },\n    'v1ris': {\n      avatarPath: '/assets/images/artists/v1ris.png',\n      displayName: 'v1ris',\n      color: '#F8B500',\n      genre: 'Classical, Violin'\n    },\n    'Rita Kamishiro': {\n      avatarPath: '/assets/images/artists/Rita Kamishiro.png',\n      displayName: 'Rita Kamishiro',\n      color: '#E17055',\n      genre: 'Classical, Viola'\n    },\n    'Marcus Ho': {\n      avatarPath: '/assets/images/artists/Marcus Ho.png',\n      displayName: 'Marcus Ho',\n      color: '#6C5CE7',\n      genre: 'Classical, Cello'\n    },\n    'AZALI': {\n      avatarPath: '/assets/images/artists/AZALI.png',\n      displayName: 'AZALI',\n      color: '#A29BFE',\n      genre: 'Electronic, Experimental'\n    },\n    'Aloysius': {\n      avatarPath: '/assets/images/artists/Aloysius.png',\n      displayName: 'Aloysius',\n      color: '#FD79A8',\n      genre: 'Electronic, Ambient'\n    },\n    'potatoTeto': {\n      avatarPath: '/assets/images/artists/potatoTeto.png',\n      displayName: 'potatoTeto',\n      color: '#00B894',\n      genre: 'Ambient, Experimental'\n    },\n    'Artisan': {\n      avatarPath: '/assets/images/artists/Artisan.png',\n      displayName: 'Artisan',\n      color: '#E84393',\n      genre: 'Electronic, Melodic'\n    },\n    'Mei Naganowa': {\n      avatarPath: '/assets/images/artists/Mei Naganowa.png',\n      displayName: 'Mei Naganowa',\n      color: '#00CEC9',\n      genre: 'Electronic, Synthesizer V'\n    },\n    'Evin a\\'k': {\n      avatarPath: '/assets/images/artists/Evin a\\'k.png',\n      displayName: 'Evin a\\'k',\n      color: '#FDCB6E',\n      genre: 'Electronic, Bass'\n    },\n    'BilliumMoto': {\n      avatarPath: '/assets/images/artists/BilliumMoto.png',\n      displayName: 'BilliumMoto',\n      color: '#74B9FF',\n      genre: 'Lofi, Chill'\n    },\n    'Elliot Hsu': {\n      avatarPath: '/assets/images/artists/Elliot Hsu.png',\n      displayName: 'Elliot Hsu',\n      color: '#55A3FF',\n      genre: 'Electronic, Ambient'\n    },\n    'Yuzuki': {\n      avatarPath: '/assets/images/artists/Yuzuki.png',\n      displayName: 'Yuzuki',\n      color: '#FF7675',\n      genre: 'Electronic, Synthesizer V'\n    },\n    'LucaProject': {\n      avatarPath: '/assets/images/artists/LucaProject.png',\n      displayName: 'LucaProject',\n      color: '#6C5CE7',\n      genre: 'Electronic, Melodic'\n    },\n    'Koway': {\n      avatarPath: '/assets/images/artists/Koway.png',\n      displayName: 'Koway',\n      color: '#A29BFE',\n      genre: 'Electronic, Experimental'\n    },\n    '伍一': {\n      avatarPath: '/assets/images/artists/伍一.png',\n      displayName: '伍一',\n      color: '#FFEAA7',\n      genre: 'Vocal, Electronic'\n    },\n    'Nstryder': {\n      avatarPath: '/assets/images/artists/Nstryder.png',\n      displayName: 'Nstryder',\n      color: '#E17055',\n      genre: 'Electronic, Hardcore'\n    },\n    'MoAE': {\n      avatarPath: '/assets/images/artists/MoAE:..png',\n      displayName: 'MoAE:.',\n      color: '#00B894',\n      genre: 'Electronic, Ambient'\n    },\n    'dystopian tanuki': {\n      avatarPath: '/assets/images/artists/dystopian tanuki.png',\n      displayName: 'dystopian tanuki',\n      color: '#636E72',\n      genre: 'Experimental, Ambient'\n    },\n    'Heem': {\n      avatarPath: '/assets/images/artists/Heem.png',\n      displayName: 'Heem',\n      color: '#FD79A8',\n      genre: 'Electronic, Melodic'\n    },\n    'Woojinee': {\n      avatarPath: '/assets/images/artists/Woojinee.png',\n      displayName: 'Woojinee',\n      color: '#E84393',\n      genre: 'Violinist'\n    },\n    'Bigg Milk': {\n      avatarPath: '/assets/images/artists/Bigg Milk.png',\n      displayName: 'Bigg Milk',\n      color: '#00CEC9',\n      genre: 'Electronic, Chill'\n    },\n    'Gardens': {\n      avatarPath: '/assets/images/artists/Gardens.png',\n      displayName: 'Gardens',\n      color: '#00B894',\n      genre: 'Electronic, Ambient'\n    },\n    'Sad Keyboard Guy': {\n      avatarPath: '/assets/images/artists/Sad Keyboard Guy.png',\n      displayName: 'Sad Keyboard Guy',\n      color: '#74B9FF',\n      genre: 'Lofi, Emotional'\n    },\n    'Futsuunohito': {\n      avatarPath: '/assets/images/artists/Futsuunohito.png',\n      displayName: 'Futsuunohito',\n      color: '#A29BFE',\n      genre: 'Electronic, Cinematic'\n    },\n    'shishishiena': {\n      avatarPath: '/assets/images/artists/shishishiena.png',\n      displayName: 'shishishiena',\n      color: '#FFEAA7',\n      genre: 'Voice Acting, Vocal'\n    },\n\n    // ====== SPECIAL MENTIONS - PRODUCTION TEAM ======\n    'PliXoR': {\n      avatarPath: '/assets/images/artists/PliXoR.png',\n      displayName: 'PliXoR',\n      color: '#ff6b6b',\n      genre: 'Mastering Engineer'\n    },\n    'NapaL': {\n      avatarPath: '/assets/images/artists/NapaL.png',\n      displayName: '나팔 NapaL',\n      color: '#4ecdc4',\n      genre: 'Cover Illustration'\n    },\n    'yy_artwork': {\n      avatarPath: '/assets/images/artists/yy_artwork.png',\n      displayName: 'yy_artwork',\n      color: '#45b7d1',\n      genre: 'Logo/Jacket Design'\n    },\n    'Elegant Sister': {\n      avatarPath: '/assets/images/artists/Elegant Sister.png',\n      displayName: 'Elegant Sister',\n      color: '#f7b733',\n      genre: 'Album Stream MV'\n    },\n    'Len': {\n      avatarPath: '/assets/images/artists/Len Licht.png',\n      displayName: 'Len',\n      color: '#5f27cd',\n      genre: 'Crossfade MV/Live2D'\n    },\n    'Daph': {\n      avatarPath: '/assets/images/artists/Daph Shoo.png',\n      displayName: 'Daph',\n      color: '#00d2d3',\n      genre: 'Live2D'\n    },\n    'honabai': {\n      avatarPath: '/assets/images/artists/honabai.png',\n      displayName: 'honabai',\n      color: '#ff9ff3',\n      genre: 'Special Thanks'\n    },\n    'shironill': {\n      avatarPath: '/assets/images/artists/shironill.png',\n      displayName: 'shironill',\n      color: '#f368e0',\n      genre: 'Special Thanks'\n    },\n\n    // ====== PHANTASIA 1 ARTISTS ======\n    'Prower': {\n      avatarPath: '/assets/images/artists/Prower.png',\n      displayName: 'Prower',\n      color: '#9b59b6',\n      genre: 'Electronic Producer'\n    },\n    'Seycara': {\n      avatarPath: '/assets/images/artists/Seycara.png',\n      displayName: 'Seycara',\n      color: '#e74c3c',\n      genre: 'Electronic Producer'\n    },\n    'Qyubey': {\n      avatarPath: '/assets/images/artists/Qyubey.png',\n      displayName: 'Qyubey',\n      color: '#f39c12',\n      genre: 'Electronic Producer'\n    },\n    'Luscinia': {\n      avatarPath: '/assets/images/artists/Luscinia.png',\n      displayName: 'Luscinia',\n      color: '#2ecc71',\n      genre: 'Electronic Producer'\n    },\n    'はがね': {\n      avatarPath: '/assets/images/artists/Hagane.png',\n      displayName: 'はがね',\n      color: '#34495e',\n      genre: 'Electronic Producer'\n    },\n    'satella': {\n      avatarPath: '/assets/images/artists/satella.png',\n      displayName: 'satella',\n      color: '#8e44ad',\n      genre: 'Electronic Producer'\n    },\n    'sleepy': {\n      avatarPath: '/assets/images/artists/Sleepless.png',\n      displayName: 'sleepy',\n      color: '#B0E0E6',\n      genre: 'Electronic Producer'\n    },\n    'tikaal': {\n      avatarPath: '/assets/images/artists/tikaal.png',\n      displayName: 'tikaal',\n      color: '#FF9F40',\n      genre: 'Bass Guitarist'\n    },\n    'Miyamai Moca': {\n      avatarPath: '/assets/images/artists/Miyamai-Moca.png',\n      displayName: 'Miyamai Moca',\n      color: '#FFB347',\n      genre: 'Synthesizer V Operator'\n    }\n  };\n\n  constructor(private http: HttpClient) {\n    this.initializeGelDbData();\n    this.loadTwitterDataFromLocalStorage();\n  }\n\n  /**\n   * Get all Phantasia 2 artists with their avatars\n   */\n  getPhantasia2Artists(): Observable<GelDbArtist[]> {\n    return this.phantasia2Artists$.asObservable();\n  }\n\n  /**\n   * Get Phantasia 2 album data with full artist information\n   */\n  getPhantasia2Album(): Observable<GelDbAlbum | null> {\n    return this.phantasia2Album$.asObservable();\n  }\n\n  /**\n   * Get the Prismatic Collections prism data\n   */\n  getPrismaticCollection(): Observable<GelDbPrism | null> {\n    return this.prismaticCollection$.asObservable();\n  }\n\n  /**\n   * Get artist avatar path by name\n   */\n  getArtistAvatar(artistName: string): string {\n    const artistData = this.artistAvatarMap[artistName];\n    return artistData?.avatarPath || '/assets/images/artists/default-avatar.png';\n  }\n\n  /**\n   * Get artist display name\n   */\n  getArtistDisplayName(artistName: string): string {\n    const artistData = this.artistAvatarMap[artistName];\n    return artistData?.displayName || artistName;\n  }\n\n  /**\n   * Get artist color theme\n   */\n  getArtistColor(artistName: string): string {\n    const artistData = this.artistAvatarMap[artistName];\n    return artistData?.color || '#74B9FF';\n  }\n\n  /**\n   * Get all artist avatar mappings\n   */\n  getArtistAvatarMap(): ArtistAvatarMap {\n    return this.artistAvatarMap;\n  }\n\n  /**\n   * Get social media links for an artist\n   */\n  getArtistSocialLinks(artistName: string): GelDbSocialLinks | null {\n    // Social media links mapping - consolidated from services\n    const socialLinksMap: Record<string, Partial<GelDbSocialLinks>> = {\n      'SpiralFlip': { youtube: 'https://www.youtube.com/@SpiralFlip', carrd: 'https://spiralflip.carrd.co/' },\n      'eili': { youtube: 'https://www.youtube.com/@EiliYT', twitter: 'https://x.com/frenlize' },\n      'Ariatec': { youtube: 'https://www.youtube.com/@musicbyariatec', reelcrafter: 'https://play.reelcrafter.com/KLSound/port' },\n      'MB': { youtube: 'https://www.youtube.com/@MBMichael', twitter: 'https://x.com/MBgov1133' },\n      'Iku Hoshifuri': { youtube: 'https://www.youtube.com/@IkuHoshifuri', linktr: 'https://lit.link/en/ikuhoshifuri' },\n      'AZALI': { youtube: 'https://www.youtube.com/@AZALI00013', twitter: 'https://x.com/AZALI00013' },\n      'Aloysius': { youtube: 'https://www.youtube.com/@aloysius3264', twitter: 'https://x.com/Aloysiu04138577' },\n      'Heem': { twitter: 'https://x.com/h_e_e__m', linktr: 'https://linktr.ee/heeem' },\n      'Prower': { twitter: 'https://x.com/prowerrr_' },\n      'Seycara': { twitter: 'https://x.com/Seycara', youtube: 'https://www.youtube.com/@Seycara' },\n      'Qyubey': { twitter: 'https://x.com/QyubeySan', youtube: 'https://www.youtube.com/@qyubey_san' },\n      'Luscinia': { twitter: 'https://x.com/LusciniaSound', youtube: 'https://www.youtube.com/@Luscinia.Nightingale' },\n      'はがね': { twitter: 'https://x.com/STEEL_PLUS', youtube: 'https://www.youtube.com/@steelplus_hagane' },\n      'Hagane': { twitter: 'https://x.com/STEEL_PLUS', youtube: 'https://www.youtube.com/@steelplus_hagane' },\n      'LucaProject': { youtube: 'https://www.youtube.com/@lucaproject6108', twitter: 'https://x.com/LucaProject6108', carrd: 'https://lucaproject.carrd.co/' },\n      'satella': { twitter: 'https://x.com/satella0w0', youtube: 'https://www.youtube.com/@satella0w0' },\n      'sleepy': { twitter: 'https://x.com/sleeplessgamign' },\n      'PliXoR': { twitter: 'https://x.com/plixormusic' },\n      'NapaL': { twitter: 'https://x.com/Ve_Xillum' },\n      'yy_artwork': { twitter: 'https://x.com/yy_artwork' },\n      'Elegant Sister': { twitter: 'https://x.com/ElegantSister' },\n      'Len': { twitter: 'https://x.com/Len_licht' },\n      'Daph': { twitter: 'https://x.com/daphshoo' },\n      'honabai': { twitter: 'https://x.com/honabai' },\n      'shironill': { twitter: 'https://x.com/shironill' },\n      'Woojinee': { instagram: 'https://www.instagram.com/wooj1nee/?igsh=czUwcXg3aWh6NmM5&utm_source=qr#' },\n      'tikaal': { twitter: 'https://x.com/tikaal' },\n      'Miyamai Moca': { twitter: 'https://x.com/ReeKDoesDTM' }\n    };\n\n    const links = socialLinksMap[artistName];\n    if (!links) return null;\n\n    return {\n      id: `social-${artistName.toLowerCase().replace(/\\s+/g, '-')}`,\n      ...links\n    } as GelDbSocialLinks;\n  }\n\n  /**\n   * Search artists by name or genre\n   */\n  searchArtists(query: string): Observable<GelDbArtist[]> {\n    return this.phantasia2Artists$.pipe(\n      map(artists => artists.filter(artist =>\n        artist.name.toLowerCase().includes(query.toLowerCase()) ||\n        artist.display_name?.toLowerCase().includes(query.toLowerCase()) ||\n        artist.genre?.toLowerCase().includes(query.toLowerCase())\n      ))\n    );\n  }\n\n  /**\n   * Get featured artists from Prismatic Collections\n   */\n  getFeaturedArtists(): Observable<GelDbArtist[]> {\n    return this.prismaticCollection$.pipe(\n      map(prism => prism?.featured_artists || [])\n    );\n  }\n\n  /**\n   * Initialize geldb data (would typically query the actual database)\n   * For now, this creates mock data based on the avatar mapping\n   */\n  private initializeGelDbData(): void {\n    try {\n      // Create mock artist data based on avatar mapping\n      const artists: GelDbArtist[] = Object.entries(this.artistAvatarMap).map(([name, data], index) => ({\n        id: `artist-${index + 1}`,\n        name,\n        display_name: data.displayName,\n        avatar: data.avatarPath,\n        color: data.color,\n        genre: data.genre,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      this.phantasia2Artists$.next(artists);\n\n      // Create mock album data\n      const phantasia2Album: GelDbAlbum = {\n        id: 'phantasia-2',\n        title: 'Phantasia 2',\n        artist: artists.find(a => a.name === 'SpiralFlip')!,\n        release_date: '2025-01-01',\n        genre: 'Electronic Compilation',\n        description: 'The second installment of the Phantasia compilation series',\n        cover_art_url: '/assets/images/covers/phantasia2-cover.jpg',\n        track_count: 20,\n        duration_seconds: 4567,\n        songs: [] // Would be populated with actual track data\n      };\n\n      this.phantasia2Album$.next(phantasia2Album);\n\n      // Create mock prism data\n      const prismaticCollection: GelDbPrism = {\n        id: 'prismatic-collections',\n        name: 'Prismatic Collections',\n        description: 'A multi-faceted music collection celebrating diverse electronic artists',\n        color_scheme: 'prismatic',\n        theme: 'electronic-fusion',\n        is_featured: true,\n        collections: [],\n        featured_artists: artists.slice(0, 10) // First 10 artists as featured\n      };\n\n      this.prismaticCollection$.next(prismaticCollection);\n\n    } catch (error) {\n      console.error('Failed to initialize geldb data:', error);\n    }\n  }\n\n  /**\n   * Refresh data from geldb (placeholder for actual database queries)\n   */\n  refreshData(): Observable<boolean> {\n    // This would typically make HTTP requests to geldb API endpoints\n    // For now, just re-initialize the mock data\n    this.initializeGelDbData();\n    return of(true);\n  }\n\n  // ====== TWITTER DATA MANAGEMENT METHODS ======\n\n  /**\n   * Get cached Twitter users\n   */\n  getTwitterUsers(): Observable<GelDbTwitterUser[]> {\n    return this.twitterUsers$.asObservable();\n  }\n\n  /**\n   * Get cached Twitter tweets\n   */\n  getTwitterTweets(): Observable<GelDbTwitterTweet[]> {\n    return this.twitterTweets$.asObservable();\n  }\n\n  /**\n   * Get Twitter API usage history\n   */\n  getTwitterApiUsage(): Observable<GelDbTwitterApiUsage[]> {\n    return this.twitterApiUsage$.asObservable();\n  }\n\n  /**\n   * Cache Twitter user data\n   */\n  cacheTwitterUser(userData: Partial<GelDbTwitterUser> & { twitter_id: string; username: string; display_name: string }): void {\n    const currentUsers = this.twitterUsers$.value;\n    const existingIndex = currentUsers.findIndex(user => user.twitter_id === userData.twitter_id);\n\n    const now = new Date().toISOString();\n    const user: GelDbTwitterUser = {\n      id: userData.id || `twitter_user_${userData.twitter_id}`,\n      twitter_id: userData.twitter_id,\n      username: userData.username,\n      display_name: userData.display_name,\n      profile_image_url: userData.profile_image_url,\n      verified: userData.verified,\n      followers_count: userData.followers_count,\n      following_count: userData.following_count,\n      tweet_count: userData.tweet_count,\n      cached_at: now,\n      updated_at: now\n    };\n\n    if (existingIndex >= 0) {\n      // Update existing user\n      currentUsers[existingIndex] = user;\n    } else {\n      // Add new user\n      currentUsers.push(user);\n    }\n\n    this.twitterUsers$.next([...currentUsers]);\n    this.saveTwitterDataToLocalStorage();\n\n    console.log(`📋 Cached Twitter user: @${user.username}`);\n  }\n\n  /**\n   * Cache Twitter tweets\n   */\n  cacheTwitterTweets(tweets: Array<Partial<GelDbTwitterTweet> & { tweet_id: string; user_id: string; text: string; created_at: string }>): void {\n    const currentTweets = this.twitterTweets$.value;\n    const now = new Date().toISOString();\n\n    tweets.forEach(tweetData => {\n      const existingIndex = currentTweets.findIndex(tweet => tweet.tweet_id === tweetData.tweet_id);\n\n      // Extract hashtags, mentions, and URLs from text\n      const hashtags = (tweetData.text.match(/#\\w+/g) || []).map(tag => tag.substring(1));\n      const mentions = (tweetData.text.match(/@\\w+/g) || []).map(mention => mention.substring(1));\n      const urls = (tweetData.text.match(/https?:\\/\\/[^\\s]+/g) || []);\n\n      const tweet: GelDbTwitterTweet = {\n        id: tweetData.id || `twitter_tweet_${tweetData.tweet_id}`,\n        tweet_id: tweetData.tweet_id,\n        user_id: tweetData.user_id,\n        text: tweetData.text,\n        created_at: tweetData.created_at,\n        retweet_count: tweetData.retweet_count,\n        like_count: tweetData.like_count,\n        reply_count: tweetData.reply_count,\n        quote_count: tweetData.quote_count,\n        hashtags,\n        mentions,\n        urls,\n        cached_at: now,\n        updated_at: now\n      };\n\n      if (existingIndex >= 0) {\n        // Update existing tweet\n        currentTweets[existingIndex] = tweet;\n      } else {\n        // Add new tweet\n        currentTweets.push(tweet);\n      }\n    });\n\n    // Sort tweets by created_at (newest first)\n    currentTweets.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n\n    this.twitterTweets$.next([...currentTweets]);\n    this.saveTwitterDataToLocalStorage();\n\n    console.log(`📋 Cached ${tweets.length} Twitter tweets`);\n  }\n\n  /**\n   * Log Twitter API usage\n   */\n  logTwitterApiUsage(apiCall: Partial<GelDbTwitterApiUsage> & { endpoint: string; method: string; success: boolean }): void {\n    const currentUsage = this.twitterApiUsage$.value;\n    const now = new Date().toISOString();\n\n    // Calculate monthly calls used\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    const monthlyCallsUsed = currentUsage.filter(call => {\n      const callDate = new Date(call.timestamp);\n      return callDate.getMonth() === currentMonth && callDate.getFullYear() === currentYear;\n    }).length + 1;\n\n    const usage: GelDbTwitterApiUsage = {\n      id: apiCall.id || `api_call_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`,\n      endpoint: apiCall.endpoint,\n      method: apiCall.method,\n      timestamp: now,\n      success: apiCall.success,\n      rate_limit_remaining: apiCall.rate_limit_remaining,\n      error_message: apiCall.error_message,\n      monthly_calls_used: monthlyCallsUsed\n    };\n\n    currentUsage.push(usage);\n\n    // Keep only the last 1000 API call logs to prevent excessive memory usage\n    if (currentUsage.length > 1000) {\n      currentUsage.splice(0, currentUsage.length - 1000);\n    }\n\n    this.twitterApiUsage$.next([...currentUsage]);\n    this.saveTwitterDataToLocalStorage();\n\n    console.log(`📊 Logged Twitter API call: ${usage.method} ${usage.endpoint} (${usage.success ? 'Success' : 'Failed'})`);\n  }\n\n  /**\n   * Get cached Twitter user by username\n   */\n  getCachedTwitterUser(username: string): Observable<GelDbTwitterUser | null> {\n    return this.twitterUsers$.pipe(\n      map(users => users.find(user => user.username.toLowerCase() === username.toLowerCase()) || null)\n    );\n  }\n\n  /**\n   * Get cached tweets for a specific user\n   */\n  getCachedTwitterTweetsForUser(userId: string): Observable<GelDbTwitterTweet[]> {\n    return this.twitterTweets$.pipe(\n      map(tweets => tweets.filter(tweet => tweet.user_id === userId))\n    );\n  }\n\n  /**\n   * Get monthly Twitter API usage statistics\n   */\n  getMonthlyApiUsageStats(): Observable<{\n    totalCalls: number;\n    successfulCalls: number;\n    failedCalls: number;\n    successRate: number;\n    remainingCalls: number;\n    lastCallTimestamp: string | null;\n  }> {\n    return this.twitterApiUsage$.pipe(\n      map(usage => {\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        const monthlyUsage = usage.filter(call => {\n          const callDate = new Date(call.timestamp);\n          return callDate.getMonth() === currentMonth && callDate.getFullYear() === currentYear;\n        });\n\n        const totalCalls = monthlyUsage.length;\n        const successfulCalls = monthlyUsage.filter(call => call.success).length;\n        const failedCalls = totalCalls - successfulCalls;\n        const successRate = totalCalls > 0 ? (successfulCalls / totalCalls) * 100 : 0;\n        const remainingCalls = Math.max(0, 100 - totalCalls); // 100 calls per month limit\n        const lastCallTimestamp = monthlyUsage.length > 0 ? monthlyUsage[monthlyUsage.length - 1].timestamp : null;\n\n        return {\n          totalCalls,\n          successfulCalls,\n          failedCalls,\n          successRate,\n          remainingCalls,\n          lastCallTimestamp\n        };\n      })\n    );\n  }\n\n  /**\n   * Check if Twitter data is cached and recent\n   */\n  isTwitterDataFresh(username: string, maxAgeHours: number = 24): Observable<boolean> {\n    return this.getCachedTwitterUser(username).pipe(\n      map(user => {\n        if (!user) return false;\n\n        const cacheAge = Date.now() - new Date(user.cached_at).getTime();\n        const maxAge = maxAgeHours * 60 * 60 * 1000; // Convert hours to milliseconds\n\n        return cacheAge < maxAge;\n      })\n    );\n  }\n\n  /**\n   * Clear Twitter cache\n   */\n  clearTwitterCache(): void {\n    this.twitterUsers$.next([]);\n    this.twitterTweets$.next([]);\n    this.twitterApiUsage$.next([]);\n    localStorage.removeItem('geldb_twitter_cache');\n    console.log('🗑️ Twitter cache cleared');\n  }\n\n  /**\n   * Save Twitter data to localStorage\n   */\n  private saveTwitterDataToLocalStorage(): void {\n    try {\n      const twitterData = {\n        users: this.twitterUsers$.value,\n        tweets: this.twitterTweets$.value,\n        usage: this.twitterApiUsage$.value,\n        timestamp: Date.now()\n      };\n\n      localStorage.setItem('geldb_twitter_cache', JSON.stringify(twitterData));\n    } catch (error) {\n      console.warn('Failed to save Twitter data to localStorage:', error);\n    }\n  }\n\n  /**\n   * Load Twitter data from localStorage\n   */\n  private loadTwitterDataFromLocalStorage(): void {\n    try {\n      const cached = localStorage.getItem('geldb_twitter_cache');\n      if (!cached) return;\n\n      const twitterData = JSON.parse(cached);\n      const age = Date.now() - twitterData.timestamp;\n\n      // Keep cache for 7 days\n      if (age > 7 * 24 * 60 * 60 * 1000) {\n        localStorage.removeItem('geldb_twitter_cache');\n        return;\n      }\n\n      this.twitterUsers$.next(twitterData.users || []);\n      this.twitterTweets$.next(twitterData.tweets || []);\n      this.twitterApiUsage$.next(twitterData.usage || []);\n\n      console.log(`📋 Loaded Twitter cache: ${twitterData.users?.length || 0} users, ${twitterData.tweets?.length || 0} tweets, ${twitterData.usage?.length || 0} API calls`);\n\n    } catch (error) {\n      console.warn('Failed to load Twitter data from localStorage:', error);\n      localStorage.removeItem('geldb_twitter_cache');\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["user", "tweet"]
}
