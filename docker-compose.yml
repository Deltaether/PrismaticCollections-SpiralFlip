version: '3.8'

# Production-optimized Docker Compose configuration
# Features: Resource limits, enhanced health checks, security, monitoring

services:
  # EdgeDB Database - Optimized for production performance
  edgedb:
    image: edgedb/edgedb:5.8
    container_name: prismatic-edgedb
    restart: unless-stopped
    environment:
      EDGEDB_SERVER_SECURITY: ${EDGEDB_SECURITY:-insecure_dev_mode}  # Use insecure mode for development
      EDGEDB_SERVER_ADMIN_UI: ${EDGEDB_ADMIN_UI:-enabled}
      EDGEDB_SERVER_HTTP_ENDPOINT_SECURITY: optional
      EDGEDB_SERVER_TLS_CERT_MODE: generate_self_signed
      # Performance tuning
      EDGEDB_SERVER_DEFAULT_DATABASE: edgedb
      EDGEDB_SERVER_LISTEN_PORT: 5656
    ports:
      - "5656:5656"
      - "8888:8888"  # Admin UI (consider removing in production)
    volumes:
      - edgedb_data:/var/lib/edgedb/data
      - ./docker/edgedb/init:/docker-entrypoint-initdb.d:ro
      - ./src/geldb/dbschema:/app/dbschema:ro
      - ./data-export:/app/data-export:ro  # Mount existing data for initialization
    networks:
      - prismatic-network
    # Resource limits for stability
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Enhanced health check with faster response
    healthcheck:
      test: ["CMD", "edgedb", "query", "--host", "localhost", "--port", "5656", "--tls-security", "insecure", "SELECT 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Node.js Backend API Server - Production optimized
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      args:
        NODE_ENV: production
    container_name: prismatic-backend
    restart: unless-stopped
    depends_on:
      edgedb:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      EDGEDB_HOST: edgedb
      EDGEDB_PORT: 5656
      EDGEDB_DATABASE: edgedb
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:80,http://localhost:8080}
      # Performance tuning
      NODE_OPTIONS: "--enable-source-maps --max-old-space-size=512"
      # Security
      NODE_TLS_REJECT_UNAUTHORIZED: 1
    ports:
      - "3001:3001"
    volumes:
      - ./docker/backend/logs:/app/logs
      - /tmp:/tmp:rw  # Temp directory access
    networks:
      - prismatic-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.2'
    # Fast health check for API responsiveness
    healthcheck:
      test: ["CMD", "curl", "-f", "-m", "5", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    # Structured logging
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false  # Backend needs write access for logs
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Python Twitter Fetcher Service - Enhanced reliability
  twitter-fetcher:
    build:
      context: .
      dockerfile: docker/python-fetcher/Dockerfile
      args:
        PYTHON_ENV: production
    container_name: prismatic-twitter-fetcher
    restart: unless-stopped
    depends_on:
      edgedb:
        condition: service_healthy
    environment:
      # Database connection
      EDGEDB_HOST: edgedb
      EDGEDB_PORT: 5656
      EDGEDB_DATABASE: edgedb
      # Application settings
      TWITTER_USERNAME: ${TWITTER_USERNAME:-prismcollect_}
      MAX_TWEETS: ${MAX_TWEETS:-100}
      SCHEDULE_INTERVAL: ${SCHEDULE_INTERVAL:-30}  # minutes
      # Python optimizations
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONFAULTHANDLER: 1
      # Health check settings
      HEALTH_CHECK_PORT: 8080
      SCHEDULER_LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8080:8080"  # Health check and metrics endpoint
    volumes:
      - ./docker/python-fetcher/logs:/app/logs
      - ./secrets:/app/secrets:ro
    networks:
      - prismatic-network
    # Resource limits for Python service
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    # Optimized health check with better error handling
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=10).raise_for_status()"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "15m"
        max-file: "3"
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: false  # Needs write access for logs
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # Angular Frontend with Nginx - High performance
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      args:
        BUILD_ENV: production
    container_name: prismatic-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"  # HTTPS support (configure SSL certificates)
    volumes:
      - ./docker/frontend/logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx:rw
    networks:
      - prismatic-network
    # Resource limits for frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 64M
          cpus: '0.1'
    # Fast health check for web server
    healthcheck:
      test: ["CMD", "curl", "-f", "-m", "3", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    # Nginx logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security hardening for web server
    security_opt:
      - no-new-privileges:true
    read_only: false  # Nginx needs write access for cache
    tmpfs:
      - /tmp:noexec,nosuid,size=20m
      - /run:noexec,nosuid,size=10m

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prismatic-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'  # 7 days
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - prismatic-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: prismatic-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - prismatic-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  prismatic-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    # Network-level security
    enable_ipv6: false
    # Custom bridge options for performance
    driver_opts:
      com.docker.network.bridge.name: prismatic-br0
      com.docker.network.driver.mtu: 1500

volumes:
  edgedb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/edgedb
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  nginx_cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=1001,gid=1001