# Advanced Nginx Security Configuration
# Include this in main nginx.conf for additional security

# Security headers - enhanced
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Content Security Policy - strict for Angular
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob: https:; font-src 'self' data:; connect-src 'self' wss: ws:; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';" always;

# Feature Policy / Permissions Policy
add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), display-capture=(), document-domain=(), encrypted-media=(), fullscreen=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), web-share=()" always;

# Additional security headers
add_header X-Permitted-Cross-Domain-Policies "none" always;
add_header X-Download-Options "noopen" always;
add_header Cross-Origin-Opener-Policy "same-origin" always;
add_header Cross-Origin-Embedder-Policy "require-corp" always;
add_header Cross-Origin-Resource-Policy "same-origin" always;

# Remove server version
server_tokens off;
more_clear_headers Server;

# Hide nginx version from error pages
server_name_in_redirect off;

# Prevent access to hidden files
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# Block access to backup and config files
location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Prevent execution of scripts in upload directories
location ~* ^/uploads/.*\.(php|pl|py|jsp|asp|sh|cgi)$ {
    return 403;
}

# Block common attack patterns
location ~* (eval\(|base64_decode|gzinflate|rot13|str_rot13) {
    return 403;
}

# Block SQL injection attempts
location ~* union.*select.*\( {
    return 403;
}

# Block file injection attempts
location ~* \.\./\.\. {
    return 403;
}

# Rate limiting for login attempts (if applicable)
location /login {
    limit_req zone=login_limit burst=5 nodelay;
    limit_req_status 429;
}

# Security for API endpoints
location /api/ {
    # Add CORS headers for API
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, X-CSRF-Token" always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Max-Age 86400;
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }
}

# Block access to sensitive files
location ~* \.(htaccess|htpasswd|ini|log|conf)$ {
    deny all;
}

# Prevent access to version control directories
location ~* /\.(git|svn|hg|bzr) {
    deny all;
    access_log off;
    log_not_found off;
}

# Block user agents (bots, scrapers)
if ($http_user_agent ~* (bot|crawl|slurp|spider|scan|grab|extract)) {
    return 403;
}